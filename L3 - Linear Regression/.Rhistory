proj4string <- '+proj=aea +lat_1=10 +lat_2=-40 +lat_0=-25 +lon_0=-50 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs'
xy <- data.frame(x=-300000, y=1900000)
pj <- project(xy, proj4string, inverse=TRUE)
latlon <- data.frame(lat=pj$y, lon=pj$x)
print(latlon)
install.packages('proj4')
install.packages('sp')
install.packages('rgdal')
library(proj4)
install.packages('libproj')
install.packages('proj4')
install.packages("proj4", dependencies = T)
install.packages('proj4')
library(proj4)
proj4string <- '+proj=aea +lat_1=10 +lat_2=-40 +lat_0=-25 +lon_0=-50 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs'
xy <- data.frame(x=-300000, y=1900000)
pj <- project(xy, proj4string, inverse=TRUE)
latlon <- data.frame(lat=pj$y, lon=pj$x)
print(latlon)
albers2latlon <- function(dz.dx, dz.dy, proj4str) {
stopifnot(length(dz.dx) == 1 && length(dz.dy) == 1)
pj <- project(xy, proj4str, inverse=TRUE)
return(data.frame(lat=pj$y, lon=pj$x))
}
albers2latlon(xy$x,xy$y,proj4string)
albers2latlon(-300000,1900000,proj4string)
albers2latlon(0,2300000,proj4string)
albers2latlon(-300000,1900000,proj4string)
albers2latlon(0,2300000,proj4string)
albers2latlon <- function(xa, ya, proj4str) {
stopifnot(length(xa) == 1 && length(ya) == 1)
pj <- project(data.frame(x=xa, y=ya), proj4str, inverse=TRUE)
return(data.frame(lat=pj$y, lon=pj$x))
}
albers2latlon(-300000,1900000,proj4string)
albers2latlon(0,2300000,proj4string)
albers2latlon(0,2500000,proj4string)
albers2latlon(-300000,1900000,proj4string)
albers2latlon(0,1600000,proj4string)
albers2latlon(1000000,1900000,proj4string)
albers2latlon(-1000000,1900000,proj4string)
library(sp)
library(rgdal)
library(proj4)
library(lattice)
install.packages('rgdal')
library(sp)
library(rgdal)
library(proj4)
library(lattice)
# grid of corners of AOI cells
xlist1 <- seq(-300000,0,by=10000)
ylist1 <- seq(1900000,2500000,by=10000)
xlist2 <- seq(-1000000,0,by=10000)
ylist2 <- seq(1600000,1900000,by=10000)
grid1 <- expand.grid(x=xlist1, y=ylist1)
grid2 <- expand.grid(x=xlist2, y=ylist2)
fullGrid <- rbind(grid1,grid2)
dim(fullGrid)
cons <-  c(5000,5000)
cents <- fullGrid + cons(col(fullGrid))
cons <-  c(5000,5000)
cons
cents <- fullGrid + cons(col(fullGrid))
cents <- fullGrid + cons[col(fullGrid)]
dim(cents)
head(fullGrid)
head(cents)
clear
muni_file <- "/media/hd1/Dropbox/amazon_hmm_shared/municipalities_without_accents.shp"
albers2latlon <- function(xa, ya, proj4str) {
stopifnot(length(xa) == 1 && length(ya) == 1)
pj <- project(data.frame(x=xa, y=ya), proj4str, inverse=TRUE)
return(data.frame(lat=pj$y, lon=pj$x))
}
proj4Albers <- '+proj=aea +lat_1=10 +lat_2=-40 +lat_0=-25 +lon_0=-50 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs'
munis <- readOGR(muni_file)
muni_file <- "/media/hd1/Dropbox/amazon_hmm_shared/brazil_municipality_shapefiles/municipalities_without_accents.shp"
munis <- readOGR(muni_file)
head(munis)
describe(munis)
library(raster)
munis
summary(munis)
cents.ll <- apply(cents, 1, function(x) albers2latlon(x[1],x[2],proj4Albers) )
cents[1,]
proj4Albers <- '+proj=aea +lat_1=10 +lat_2=-40 +lat_0=-25 +lon_0=-50 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs'
albers2latlon(cents[1,1],cents[1,2],proj4Albers)
albers2latlon(-295000,1905000,proj4Albers)
library(sp)
library(rgdal)
library(proj4)
library(lattice)
albers2latlon <- function(xa, ya, proj4str) {
stopifnot(length(xa) == 1 && length(ya) == 1)
pj <- project(data.frame(x=xa, y=ya), proj4str, inverse=TRUE)
return(data.frame(lat=pj$y, lon=pj$x))
}
proj4string <- '+proj=aea +lat_1=10 +lat_2=-40 +lat_0=-25 +lon_0=-50 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs'
albers2latlon(-300000,1900000,proj4string)
albers2latlon <- function(xa, ya, proj4str) {
stopifnot(length(xa) == 1 && length(ya) == 1)
pj <- project(data.frame(x=xa, y=ya), proj4str)
return(data.frame(lat=pj$y, lon=pj$x))
}
albers2latlon(-300000,1900000,proj4string)
project(data.frame(x=-300000, y=1900000), proj4string, inverse=TRUE)
library(sp)
library(rgdal)
library(proj4)
library(lattice)
albers2latlon <- function(xa, ya, proj4str) {
stopifnot(length(xa) == 1 && length(ya) == 1)
pj <- project(data.frame(x=xa, y=ya), proj4str, inverse=TRUE)
return(data.frame(lat=pj$y, lon=pj$x))
}
proj4string <- '+proj=aea +lat_1=10 +lat_2=-40 +lat_0=-25 +lon_0=-50 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs'
project(data.frame(x=-300000, y=1900000), proj4string, inverse=TRUE)
library(raster)
project(data.frame(x=-300000, y=1900000), proj4string, inverse=TRUE)
install.packages('raster')
albers2latlon(-300000,1900000,proj4string)
albers2latlon(0,1600000,proj4string)
muni_file <- "/media/hd1/Dropbox/amazon_hmm_shared/brazil_municipality_shapefiles/municipalities_without_accents.shp"
albers2latlon <- function(xa, ya, proj4str) {
stopifnot(length(xa) == 1 && length(ya) == 1)
pj <- project(data.frame(x=xa, y=ya), proj4str, inverse=TRUE)
return(data.frame(lat=pj$y, lon=pj$x))
}
proj4Albers <- '+proj=aea +lat_1=10 +lat_2=-40 +lat_0=-25 +lon_0=-50 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs'
# grid of corners of AOI cells
xlist1 <- seq(-300000,0,by=10000)
ylist1 <- seq(1900000,2500000,by=10000)
xlist2 <- seq(-1000000,0,by=10000)
ylist2 <- seq(1600000,1900000,by=10000)
grid1 <- expand.grid(x=xlist1, y=ylist1)
grid2 <- expand.grid(x=xlist2, y=ylist2)
fullGrid <- rbind(grid1,grid2)
# approximate centroids of those cells
cons <-  c(5000,5000)
cents <- fullGrid + cons[col(fullGrid)]
head(cetns)
head(cents)
cents.ll <- apply(cents, 1, function(x) albers2latlon(x[1],x[2],proj4Albers) )
head(cents.ll)
cents <- cbind(cents,fullGrid)
head(cents)
cents <- fullGrid + cons[col(fullGrid)]
cents.ll <- apply(cents, 1, function(x) albers2latlon(x[1],x[2],proj4Albers) )
cents.overlay <- over(cents.ll, munis)
grid.pts <- SpatialPointsDataFrame(cents.ll, proj4string=CRS("+proj=longlat +datum=WGS84"))
grid.pts <- SpatialPointsDataFrame(cents.ll, fullGrid, proj4string=CRS("+proj=longlat +datum=WGS84"))
dim(cents.ll)
dim(cents)
dim(fullGrid)
cents.ll <- apply(cents, 1, function(x) albers2latlon(x[1],x[2],proj4Albers) )
dim(cents.ll)
head(cents.ll)
cents.ll <- do.call(rbind, cents.l)
cents.ll <- do.call(rbind, cents.ll)
head(cents.ll)
dim(cents.ll)
grid.pts <- SpatialPointsDataFrame(cents.ll, fullGrid, proj4string=CRS("+proj=longlat +datum=WGS84"))
head(grid.pts)
munis <- readOGR(muni_file)
# summary(munis)
munis$geocode <- as.numeric(as.character(munis$GEOCODIGO))  # Careful converting factors
munis$uf_code <- as.numeric(as.character(munis$CODUF))
munis$micro_code <- as.numeric(as.character(munis$MICRORREGI))
munis$meso_code <- as.numeric(as.character(munis$MESORREGIA))
munis$muni_name <- as.character(munis$NOME_MUNIC)
munis$meso_name <- as.character(munis$NOME_MESO)
munis$micro_name <- as.character(munis$NOME_MICRO)
munis$region_name <- as.character(munis$NOMREG)
munis$uf_str <- as.character(munis$UF)
munis = spTransform(counties, CRS("+proj=longlat +datum=WGS84"))
munis = spTransform(munis, CRS("+proj=longlat +datum=WGS84"))
cents.overlay <- over(cents.ll, munis)
grid.overlay <- over(grid.pts, munis)
grid.pts <- spCbind(grid.pts, cents.overlay[, c("geocode", "uf_code", "micro_code",
"meso_code", "muni_name", "meso_name", "micro_name", "region_name", "uf_str")])
library(maptools)
install.packages("maptools")
library(maptools)
grid.pts <- spCbind(grid.pts, cents.overlay[, c("geocode", "uf_code", "micro_code",
"meso_code", "muni_name", "meso_name", "micro_name", "region_name", "uf_str")])
grid.pts <- spCbind(grid.pts, grid.overlay[, c("geocode", "uf_code", "micro_code",
"meso_code", "muni_name", "meso_name", "micro_name", "region_name", "uf_str")])
head(grid.pts)
head(grid.overlay)
albers2latlon <- function(xa, ya, proj4str) {
stopifnot(length(xa) == 1 && length(ya) == 1)
pj <- project(data.frame(x=xa, y=ya), proj4str, inverse=TRUE)
return(data.frame(lon=pj$x, lat=pj$y))
}
# convert centroids to lat/lon
cents.ll <- apply(cents, 1, function(x) albers2latlon(x[1],x[2],proj4Albers) )
cents.ll <- do.call(rbind, cents.ll)
# create spatial points data frame, with centroids as points coordinates
grid.pts <- SpatialPointsDataFrame(cents.ll, fullGrid, proj4string=CRS("+proj=longlat +datum=WGS84"))
grid.overlay <- over(grid.pts, munis)
head(grid.overlay)
grid.pts <- spCbind(grid.pts, grid.overlay[, c("geocode", "uf_code", "micro_code",
"meso_code", "muni_name", "meso_name", "micro_name", "region_name", "uf_str")])
head(grid.pts)
grid_file <- "/media/hd1/Dropbox/amazon_hmm_shared/data/processed/grid.csv"
write.csv(grid.pts@data, file=grid_file, row.names=FALSE)
setwd('/media/hd1/Dropbox/Econometrics-PhD-me/L3 - Linear Regression')
data <- read.csv('cornwell-rupert.csv')
data <- data %>% mutate(EXP2 = EXP^2)
reg_1 <- lm(LWAGE ~ ED + EXP + EXP2 + WKS + OCC + SOUTH + SMSA
+ MS + FEM + UNION, data = data)
suppressMessages(library(tidyverse))
install.packages('tidyverse')
suppressMessages(library(tidyverse))
suppressMessages(library(tidyverse))
suppressMessages(library('tidyverse''))
''
suppressMessages(library('tidyverse'))
library(tidyverse)
reg_1 <- lm(LWAGE ~ ED + EXP + WKS + OCC + SOUTH + SMSA
+ MS + FEM + UNION, data = data)
summary(reg_1)
data <- cbind(data, EXP^2)
install.packages('httr')
install.packages('rvest')
summary(data)
data <- cbind(data, data$EXP^2)
summary(data)
data <- read.csv('cornwell-rupert.csv')
data <- cbind(data, EXP2=data$EXP^2)
summary(data)
reg_1 <- lm(LWAGE ~ ED + EXP + EXP2 + WKS + OCC + SOUTH + SMSA
+ MS + FEM + UNION, data = data)
summary(reg_1)
install.packages('readstata13')
install.packages('sandwich')
install.packages('lmtest')
